import React, { Component, PropTypes } from 'react'
import { FormGroup, FormControl, Button } from 'react-bootstrap'
import {
  ANNUAL_INCOME
} from '../../../../../../../../constants/PatientsAttr'
import * as transPatients from '../../../../../../../../translate/Models/patients'
import { FormattedMessage } from 'react-intl'
class CalloutSectionsSocioeconomicstatus extends Component {
  static propTypes = {
    patientInfo: PropTypes.object.isRequired,
    fetchUpdateInfo: PropTypes.func,
  }
  constructor (props) {
    super(props)
    this.state = {
      readOnly: true,
      annualIncome:'',
      paymentMethod:''
    }
  }
  componentWillMount () {
    const { patientInfo } = this.props
    this.setState({
      annualIncome:patientInfo.annualIncome,
      paymentMethod:patientInfo.paymentMethod
    })
  }
  handleChangeAnnualIncome = (e, name) => {
    this.setState({
      annualIncome:e.target.value,
    })
    e.preventDefault()
  }
  handleChangePaymentMethod= (e, name) => {
    this.setState({
      paymentMethod:e.target.value
    })
    e.preventDefault()
  }
  handleChangeEdit = () => {
    const { patientInfo } = this.props
    this.setState({
      readOnly: false,
      annualIncome:patientInfo.annualIncome,
      paymentMethod:patientInfo.paymentMethod
    })
  }
  handleSave = () => {
    const { patientInfo, fetchUpdateInfo } = this.props
    var modifyNames = {}
    modifyNames.annualIncome = this.state.annualIncome
    modifyNames.paymentMethod = this.state.paymentMethod
    fetchUpdateInfo(patientInfo.id, modifyNames)
    this.setState({
      readOnly: true
    })
  }
  _buildBody = () => {
    const { patientInfo } = this.props
    return (
      <div className='row form-inline'>
        <div className='col-xs-8 col-md-11'>年收入:
          <FormattedMessage id={transPatients.annualIncome(patientInfo.annualIncome)} />
        </div>
        <div className='col-xs-8 col-md-11'>医疗费用支付方式:
            {patientInfo.paymentMethod}
        </div>
      </div>
    )
  }
  _editBody = () => {
    return (
      <div className='row form-inline'>
        <div className='col-xs-8 col-md-11'>年收入:
          <FormGroup controlId='formControlsSelect'>
            <FormControl
              componentClass='select'
              placeholder='select'
              value={this.state.annualIncome}
              onChange={(e) => this.handleChangeAnnualIncome(e, 'annualIncome')}>
              <option value={ANNUAL_INCOME.LESS_THAN_30_MILLION}>
                <FormattedMessage id={transPatients.annualIncome(ANNUAL_INCOME.LESS_THAN_30_MILLION)} />
              </option>
              <option value={ANNUAL_INCOME.GREATER_THAN_30_MILLION_LESS_THAN_100_MILLION}>
                <FormattedMessage
                  id={transPatients.annualIncome(ANNUAL_INCOME.GREATER_THAN_30_MILLION_LESS_THAN_100_MILLION)}
                />
              </option>
              <option value={ANNUAL_INCOME.GREATER_THAN_100_MILLION_LESS_THAN_500_MILLION}>
                <FormattedMessage
                  id={transPatients.annualIncome(ANNUAL_INCOME.GREATER_THAN_100_MILLION_LESS_THAN_500_MILLION)}
                />
              </option>
              <option value={ANNUAL_INCOME.GREATER_THAN_500_MILLION}>
                <FormattedMessage id={transPatients.annualIncome(ANNUAL_INCOME.GREATER_THAN_500_MILLION)} />
              </option>
            </FormControl>
          </FormGroup>
        </div>
        <div className='col-xs-8 col-md-11'>医疗费用支付方式:
          <FormGroup controlId='formControlsSelect'>
            <FormControl
              componentClass='select'
              placeholder='select'
              value={this.state.paymentMethod}
              onChange={(e) => this.handleChangePaymentMethod(e, 'paymentMethod')}>
              <option value='城镇职工基本医疗保险'>城镇职工基本医疗保险</option>
              <option value='城镇居民基本医疗保险'>城镇居民基本医疗保险</option>
              <option value='新型农村合作医疗'>新型农村合作医疗</option>
              <option value='贫困救助'>贫困救助</option>
              <option value='商业医疗保险'>商业医疗保险</option>
              <option value='全公费'>全公费</option>
              <option value='全自费'>全自费</option>
              <option value='其他'>其他</option>
            </FormControl>
          </FormGroup>
        </div>
      </div>
    )
  }
  render () {
    const header = {
      title:'社会经济状况'
    }
    let bodyEle = ''
    if (this.state.readOnly) {
      bodyEle = this._buildBody()
    } else {
      bodyEle = this._editBody()
    }
    const hasHeader = !!header && header.title
    return (
      <div className='callout bg-gray-light callout-text callout-pad-sm'>
        <div className='box no-border no-padding no-margin no-shadow bg-gray-light'>
          {
            hasHeader ? (
              <div className='box-header with-border'>
                <div className='row'>
                  <div className='col-xs-8 col-md-11'>
                    {header.title}
                  </div>
                  <div className='col-xs-4 col-md-1'>
                    {
                      this.state.readOnly ? (
                        <Button
                          onClick={this.handleChangeEdit}
                          className='pull-right btn-pad' bsStyle='primary' >编辑</Button>
                      ) : (
                        <Button
                          onClick={this.handleSave}
                          className='pull-right btn-pad' bsStyle='success' >保存</Button>
                      )
                    }
                  </div>
                </div>
              </div>
            ) : ''
          }
          <div className='box-body'>
            {
              /* 根据 header 判断 body 宽度 */
              hasHeader ? (
                bodyEle
              ) : (
                <div className='row'>
                  <div className='col-xs-8 col-md-11'>
                    {bodyEle}
                  </div>
                </div>
              )
            }
          </div>
        </div>
      </div>
    )
  }
}

export default CalloutSectionsSocioeconomicstatus
