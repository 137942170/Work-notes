import React, { Component, PropTypes } from 'react'

export default class SelectWithInputInOther extends Component {
  static defaultProps = {
    ...Component.defaultProps,
    wrapperClassName: 'col-md-6',
    labelClassName: 'col-md-2',
    contentClassName: 'col-md-6',
    isRequired: false
  }
  static propTypes = {
    name: PropTypes.string.isRequired,
    depChange: PropTypes.func.isRequired,
    input: PropTypes.object.isRequired,
    options: PropTypes.array.isRequired,
    placeholder: PropTypes.string,
    labelText: PropTypes.string.isRequired,
    isRequired: PropTypes.bool,
    wrapperClassName: PropTypes.string,
    labelClassName: PropTypes.string,
    contentClassName: PropTypes.string,
    hideInput: PropTypes.shape({
      type: PropTypes.string,
      placeholder: PropTypes.string,
      matchValues: PropTypes.array.isRequired,
    }).isRequired,
  }
  constructor (props) {
    super(props)
    this.state = {
      inputHidden: true,
      selectdValue: '',
    }
  }
  createOptions = (options, placeholder) => {
    const optionEles = options.map((option, i) => {
      return (
        <option key={i} value={option.value}>
          { option.label || option.value }
        </option>)
    })

    if (placeholder) {
      optionEles.unshift(<option key='placeholder' value='' > {placeholder} </option>)
    }

    return optionEles
  }
  handleSelectChange = (event) => {
    const { depChange, name, hideInput: { matchValues } } = this.props
    const nextSelectedValue = event.target.value

    if (this.state.selectdValue !== nextSelectedValue) {
      const isMatch = matchValues.some(item => item === nextSelectedValue)
      depChange(name, isMatch ? '' : nextSelectedValue)

      this.setState({
        selectdValue: nextSelectedValue,
        inputHidden: !isMatch
      })
    }
  }
  _buildSelect = () => {
    /**
     * 这里创建一个不依赖 redux-from 的 select, 通过 onChange 改变真正 input 的值
     */
    const { options, placeholder } = this.props
    const selectOptions = this.createOptions(options, placeholder)
    return (
      <select
        className='form-control margin-r-5'
        onChange={this.handleSelectChange}
        children={selectOptions}
        />
    )
  }
  _buildInput = () => {
    const { name, hideInput: { placeholder, type }, input } = this.props
    return (
      <input name={name}
        className='form-control margin-r-5'
        placeholder={placeholder}
        type={type}
        {...input}
        />
    )
  }
  render () {
    const { name,
      isRequired,
      labelText,
      wrapperClassName,
      labelClassName,
      contentClassName,
    } = this.props

    const asterisk = isRequired ? (<b className='text-danger'>*</b>) : ''
    const selectEle = this._buildSelect()
    const inputEle = this._buildInput()

    return (
      <div className={wrapperClassName}>
        <div className='form-group form-inline'>
          <label htmlFor={name} className={`${labelClassName} control-label`}>
            {asterisk}
            {labelText}
          </label>
          <div className={contentClassName}>
            {selectEle}
            {!this.state.inputHidden ? inputEle : ''}
          </div>
        </div>
      </div>
    )
  }
}
